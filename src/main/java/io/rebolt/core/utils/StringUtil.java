package io.rebolt.core.utils;

import java.util.SplittableRandom;

public final class StringUtil {

  private static final char[] hexDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
  private static final byte[] hexFilters = {0, 10, 11, 12, 13, 14, 15};
  private static final char[] alphaDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};

  // region isNullOrEmpty

  /**
   * {@link String}에 대한 null 또는 empty 반복 검사
   *
   * @param value {@link String}
   * @return true or false
   */
  public static boolean isNullOrEmpty(String value) {
    return value == null || value.isEmpty();
  }

  /**
   * {@link String}에 대한 null 또는 empty 반복 검사
   *
   * @param values {@link String} 배열
   */
  public static boolean isNullOrEmpty(String... values) {
    for (String value : values) {
      if (isNullOrEmpty(value)) {
        return true;
      }
    }
    return false;
  }

  /**
   * {@link StringBuilder}에 대한 null 또는 empty 검사
   *
   * @param value {@link StringBuilder}
   * @return true or false
   */
  public static boolean isNullOrEmpty(StringBuilder value) {
    return value == null || value.length() == 0;
  }

  /**
   * Trim된 {@link String}에 대한 null 또는 empty 검사
   *
   * @param value Trim {@link String}
   * @return true or false
   */
  public static boolean isNullOrEmptyWithTrim(String value) {
    return value == null || isNullOrEmpty(value.trim());
  }

  /**
   * {@link String}에 대한 숫자검사
   *
   * @param value 숫자로된 {@link String}
   * @return true or false
   */
  public static boolean isNumeric(String value) {
    return !isNullOrEmpty(value) && !value.chars().anyMatch(entity -> entity < 48 || entity > 57);
  }
  // endregion

  // region hexString

  /**
   * HexString to ByteArray
   *
   * @param hexString Hex {@link String}
   * @return Byte array
   */
  public static byte[] hexToByteArray(String hexString) {
    if (hexString == null || hexString.length() % 2 != 0) {
      return new byte[0];
    }
    byte[] charBuffer = new byte[hexString.length() / 2];
    int index;
    int head, tail;
    for (int i = 0; i < charBuffer.length; i++) {
      index = i * 2;
      head = hexString.codePointAt(index);
      tail = hexString.codePointAt(index + 1);
      charBuffer[i] = (byte) (((head & 0x40) == 0 ? head & 0x0f : hexFilters[head & 0x0f]) * 16 | ((tail & 0x40) == 0 ? tail & 0x0f : hexFilters[tail & 0x0f]));
    }
    return charBuffer;
  }

  /**
   * ByteArray to HexString
   *
   * @param bytes Byte array
   * @return Hex {@link String}
   */
  public static String byteArrayToHex(byte[] bytes) {
    if (bytes == null || bytes.length == 0) {
      return "";
    }
    int length = bytes.length;
    char[] charBuffer = new char[length * 2];
    int index;
    for (int i = 0; i < length; i++) {
      index = i * 2;
      charBuffer[index] = hexDigits[(bytes[i] & 0xf0) >> 4];
      charBuffer[index + 1] = hexDigits[bytes[i] & 0x0f];
    }
    return new String(charBuffer);
  }

  // endregion

  // region randomString

  /**
   * A generator of uniform pseudorandom values applicable for use in (among other contexts) isolated parallel computations that may generate subtasks. Class SplittableRandom
   * supports methods for producing pseudorandom numbers of type int, long, and double with similar usages as for class Random but differs in the following ways:
   * <p>
   * Series of generated values pass the DieHarder suite testing independence and uniformity properties of random number generators. (Most recently validated with version 3.31.1.)
   * These tests validate only the methods for certain types and ranges, but similar properties are expected to hold, at least approximately, for others as well. The period (length
   * of any series of generated values before it repeats) is at least 264.
   * <p>
   * Method split() constructs and returns a new SplittableRandom instance that shares no mutable state with the current instance. However, with very high probability, the values
   * collectively generated by the two objects have the same statistical properties as if the same quantity of values were generated by a single thread using a single
   * SplittableRandom object.
   * <p>
   * Instances of SplittableRandom are not thread-safe. They are designed to be split, not shared, across threads. For example, a fork/join-style computation using random numbers
   * might include a construction of the form new Subtask(aSplittableRandom.split()).fork().
   * <p>
   * This class provides additional methods for generating random streams, that employ the above techniques when used in stream.parallel() mode. Instances of SplittableRandom are
   * not cryptographically secure. Consider instead using SecureRandom in security-sensitive applications. Additionally, default-constructed instances do not use a
   * cryptographically random seed unless the system property java.util.secureRandomSeed is set to true.
   * <p>
   * Since: 1.8
   */
  private final static SplittableRandom random = new SplittableRandom();

  /**
   * 고정된 길이의 랜덤문자열 생성
   *
   * @param length 길이
   * @return {@link String}
   */
  public static String randomAlpha(int length) {
    if (length <= 0) {
      throw new IllegalArgumentException("A random string's length cannot be zero or negative");
    }
    char[] buffer = new char[length];
    for (int i = 0; i < length; i++) {
      buffer[i] = alphaDigits[random.nextInt(alphaDigits.length)];
    }
    return new String(buffer);
  }

  /**
   * 가변 길이의 랜덤문자열 생성
   *
   * @param min 최소길이
   * @param max 최대길이
   * @return {@link String}
   */
  public static String randomAlpha(int min, int max) {
    if (min <= 0 || max <= 0 || min > max) {
      throw new IllegalArgumentException("A random string's length cannot be zero or negative or min > max");
    }
    return randomAlpha(random.nextInt(max - min) + min);
  }

  // endregion

}